plugins {
    id 'java'
    id 'org.springframework.boot' version '3.0.6'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'io.freefair.lombok' version '8.0.1'
    //id 'com.github.spotbugs' version '5.0.14'
    id 'checkstyle'
    id 'jacoco'
    id 'com.google.cloud.tools.jib' version '3.3.1'
}
group 'org.hrabosch'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-batch'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.4'
    implementation 'com.h2database:h2:2.1.214'


    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

ext {
    DOCKER_REGISTRY = System.getenv("DOCKER_REGISTRY") ?: "localhost:5000" 
}

tasks.named('test') {
    useJUnitPlatform()
}

//spotbugs {
//    excludeFilter.set(file("$rootProject.projectDir/config/spotbugs/excludeFilter.xml"))
//}

jib {
  from {
    image = 'openjdk:alpine'
  }
  to {
    image = project.findProperty('docker_registry') ?: '' + 'hrabosch/crypto-recommendation-service'
    tags = [version, 'latest']
  }
  container {
  }
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = false
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
}